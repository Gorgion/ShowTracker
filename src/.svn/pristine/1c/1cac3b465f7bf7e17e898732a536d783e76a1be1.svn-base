/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.showtracker.config;

import java.io.IOException;
import java.util.Calendar;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;
import net.sf.showtracker.domain.LoginDetails;
import net.sf.showtracker.domain.UserAccountAuth;
import net.sf.showtracker.security.service.SecurityUserDetailsServiceImpl;
import net.sf.showtracker.service.LoginDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;

/**
 *
 * @author TomÄ‚Ë‡ÄąË‡
 */
@Configuration
@EnableWebMvcSecurity
//@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter
{

    @Autowired
    @Qualifier("securityUserDetailsService")
    private UserDetailsService securityUserDetailsService;
    
    @Autowired
    private LoginDetailsService loginDetailsService;

    @Autowired
    DataSource dataSource;

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception
    {
        auth.userDetailsService(securityUserDetailsService).passwordEncoder(passwordEncoder());

//        auth.inMemoryAuthentication().withUser("mk").password("123").roles("USER");
//        auth.inMemoryAuthentication().withUser("admin").password("123").roles("USER", "ADMIN");
//        auth.inMemoryAuthentication().withUser("dba").password("123456").roles("DBA");
    }

    @Bean(name = "authMgr")
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception
    {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception
    {

        http.authorizeRequests()
                .antMatchers("/auth/**").authenticated()
                .antMatchers("/assets/**").permitAll()
                //                .antMatchers("/","signUp").permitAll()
                //////                    .permitAll()
                //                    .anyRequest().authenticated()
                //                .access("hasRole('ROLE_USER')")
            .and()
                .formLogin()
                .successHandler(savedRequestAwareAuthenticationSuccessHandler())
                .loginPage("/login")//.permitAll()
                //                        .defaultSuccessUrl("/auth/shows")
                .failureUrl("/login?error")
                //                        .loginProcessingUrl("/auth/login_check")
            .and()
                .logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID", "remember-me")
                //                .and()
                //                    .sessionManagement()
                //                        .invalidSessionUrl("/login?session")
            .and()
                .csrf()
            .and()
                .rememberMe()//authenticationSuccessHandler(null)
                //                        .useSecureCookie(true)
                .tokenRepository(persistentTokenRepository())
                .tokenValiditySeconds(7776000);
//                .and()
//                    .sessionManagement().
//                .and().exceptionHandling();//.accessDeniedPage("/500");

    }
    
//    @Bean
//    private AuthenticationSuccessHandler()
//    {
//        
//    }

    @Bean(name = "passwordEncoder")    
    public PasswordEncoder passwordEncoder()
    {
        PasswordEncoder encoder = new BCryptPasswordEncoder();
        return encoder;

        //return ((SecurityUserDetailsServiceImpl) securityUserDetailsService).getPasswordEncoder();
    }

    @Bean
    public PersistentTokenRepository persistentTokenRepository()
    {
        JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl();
        db.setDataSource(dataSource);

        return db;
    }

//    @Bean
//    public SavedRequestAwareAuthenticationSuccessHandler
//            savedRequestAwareAuthenticationSuccessHandler()
//    {
//        SavedRequestAwareAuthenticationSuccessHandler auth
//                = new SavedRequestAwareAuthenticationSuccessHandler();
//        auth.setTargetUrlParameter("targetUrl");
//        return auth;
//    }
    @Bean
    public SavedRequestAwareAuthenticationSuccessHandler
            savedRequestAwareAuthenticationSuccessHandler()
    {
        SavedRequestAwareAuthenticationSuccessHandler auth
                = new SavedRequestAwareAuthenticationSuccessHandler()
                {
                    @Override
                    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException
                    {
                        HttpSession session = request.getSession();
//                        System.out.println("\n\n----AUTH----\n" + authentication);
//                        
//                        if(authentication.getPrincipal() instanceof UserAccountAuth)
//                        {
//                            System.out.println("\n-----aaa");
//                            LoginDetails ld = new LoginDetails();
//                            ld.setAccountId(((UserAccountAuth)authentication.getPrincipal()).getUserAccountId());
//                            ld.setTime(Calendar.getInstance().getTime());
//                            
//                            System.out.println("-->" + ld);
//                            loginDetailsService.create(ld);
//                            System.out.println("----done--");
//                        }
                        
                        if (session != null)
                        {
                            String redirectUrl = (String) session.getAttribute("targetUrl");

//                            System.out.println("\n\n----------REDI>" + redirectUrl);
                            if (redirectUrl != null)
                            {
                                // we do not forget to clean this attribute from session
                                session.removeAttribute("targetUrl");
                                // then we redirect
                                getRedirectStrategy().sendRedirect(request, response, redirectUrl);
                            } else
                            {
                                super.onAuthenticationSuccess(request, response, authentication);
                            }
                        } else
                        {
                            super.onAuthenticationSuccess(request, response, authentication);
                        }
                    }
                };
//        auth.setTargetUrlParameter("targetUrl");
        return auth;
    }
}
